name: CI/CD Pipeline for Auth Service

on:
  push:
    branches:
      - main
      - "release/**"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: üîÑ Checkout c√≥digo
        uses: actions/checkout@v3

      - name: ‚òï Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: üß™ Ejecutar Tests y Analizar cobertura
        run: mvn clean verify

      - name: üîç An√°lisis SonarQube
        run: >
          mvn sonar:sonar \
            -Dsonar.projectKey=auth-service \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: üê≥ Login en DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: üèóÔ∏è Build imagen Docker
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/auth-service:latest .

      - name: üöÄ Push imagen a DockerHub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

      - name: üì¶ Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: üìÑ Decodificar Kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config

      - name: ‚ò∏Ô∏è Desplegar en Kubernetes
        run: |
          kubectl apply -f configmap.yaml
          kubectl apply -f deployment-dev.yaml
          kubectl apply -f service.yaml
